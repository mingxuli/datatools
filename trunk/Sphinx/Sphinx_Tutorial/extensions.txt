.. _extensions:


************************
Sphinx的扩展模块
************************

Sphinx是利用Python语言开发的，因此也可以用Python开发各种扩展模块。
我们在撰写matplotlib文档的是有开发了几个扩展模块，这些扩展模块一部分
包含在matplotlib自己的matplotlib.sphinxext模块中，还有一部分包含在Sphinx目录中。
还有一些扩展模块是其他小组开发的，如numpy和ipython。在本教程中，我们对这些模块进行了收集，
同时也将向你展示如何安装和使用这些扩展模块。首先你需要获得这些模块，具体办法请参考 :ref:`fetching-the-data`
数据下载完后请拷贝到你的 :file:`sphinxext` 目录中，相关的文件列表如下::
	
	apigen.py
	inheritance_diagram.py
	docscrape.py
	ipython_console_highlighting.py
	docscrape_sphinx.py
	numpydoc.py

除了matplotlit内置的matplotlib扩展模块可以利用matplot本身的功能实现画图和数据公式显示外，
我们还有扩展模块来实现ipython的语法高亮显示功能和绘制继承图的(inhertiance diagrams)的功能；

我们需要通过修改 :file:`conf.py` 告诉Sphinx我们有新的扩展模块，首先需要告诉sphinx在哪里找到这些模块,
修改以下相关代码::

    # If your extensions are in another directory, add it here. If the
    # directory is relative to the documentation root, use
    # os.path.abspath to make it absolute, like shown here.
    sys.path.append(os.path.abspath('sphinxext'))

接下来告诉Sphinx我们需要加载哪些模块::

    # Add any Sphinx extension module names here, as strings. They can
    # be extensions coming with Sphinx (named 'sphinx.ext.*') or your
    # custom ones.
    extensions = ['matplotlib.sphinxext.mathmpl',
              'matplotlib.sphinxext.only_directives',
              'matplotlib.sphinxext.plot_directive',
              'sphinx.ext.autodoc',
              'sphinx.ext.doctest',
              'ipython_console_highlighting',
              'inheritance_diagram',
              'numpydoc']


现在我们看看怎么在Sphinx实现相关的功能.  相关源代码请参考 :ref:`extensions-literal`.


.. _ipython-highlighting:

ipython会话高亮显示
====================

Michael Droettboom 开发的这个模块可以使用 `pygments <http://pygments.org>`_ 
来高亮显示 `ipython <http://ipython.scipy.org>`_ 的会话. 你只需要使用 ``sourcecode`` 指令就可以了，
如::

    .. sourcecode:: ipython

        In [69]: lines = plot([1,2,3])

        In [70]: setp(lines)
          alpha: float
          animated: [True | False]
          antialiased or aa: [True | False]
          ...snip


输出结果如下.

.. sourcecode:: ipython

    In [69]: lines = plot([1,2,3])

    In [70]: setp(lines)
      alpha: float
      animated: [True | False]
      antialiased or aa: [True | False]
      ...snip

在本教程中我们需要单独下载和加载这个模块，但在pygments未来版本中，可能会内置了这个模块，我们可以直接加载这个模块.

.. _using-math:

使用数学公式
=============

在Sphinx我们可以在一行文字的当中插入数据公式,如 :math:`a^2 + b^2 = c^2` ，也可以另起一行来显示数据公式，如：

.. math::

  W^{3\beta}_{\delta_1 \rho_1 \sigma_2} = U^{3\beta}_{\delta_1 \rho_1} + \frac{1}{8 \pi 2} \int^{\alpha_2}_{\alpha_2} d \alpha^\prime_2 \left[\frac{ U^{2\beta}_{\delta_1 \rho_1} - \alpha^\prime_2U^{1\beta}_{\rho_1 \sigma_2} }{U^{0\beta}_{\rho_1 \sigma_2}}\right]

要在你的文档中插入公式，必须使用 math 指令，下面是一个简单数学公式的代码::

    .. math::

      W^{3\beta}_{\delta_1 \rho_1 \sigma_2} \approx U^{3\beta}_{\delta_1 \rho_1}

显示结果：

.. math::

   W^{3\beta}_{\delta_1 \rho_1 \sigma_2} \approx U^{3\beta}_{\delta_1 \rho_1}

This documentation framework includes a Sphinx extension,
:file:`sphinxext/mathmpl.py`, that uses matplotlib to render math
equations when generating HTML, and LaTeX itself when generating a
PDF.  This can be useful on systems that have matplotlib, but not
LaTeX, installed.  To use it, add ``mathmpl`` to the list of
extensions in :file:`conf.py`.

Current SVN versions of Sphinx now include built-in support for math.
There are two flavors:

  - pngmath: uses dvipng to render the equation

  - jsmath: renders the math in the browser using Javascript

To use these extensions instead, add ``sphinx.ext.pngmath`` or
``sphinx.ext.jsmath`` to the list of extensions in :file:`conf.py`.

All three of these options for math are designed to behave in the same
way.

See the matplotlib `mathtext guide
<http://matplotlib.sourceforge.net/users/mathtext.html>`_ for lots
more information on writing mathematical expressions in matplotlib.

.. _pyplots:

Inserting matplotlib plots
==========================

Inserting automatically-generated plots is easy.  Simply put the
script to generate the plot in the :file:`pyplots` directory, and
refer to it using the ``plot`` directive.  First make a
:file:`pyplots` directory at the top level of your project (next to
:``conf.py``) and copy the :file:`ellipses.py`` file into it::

    home:~/tmp/sampledoc> mkdir pyplots
    home:~/tmp/sampledoc> cp ../sampledoc_tut/pyplots/ellipses.py pyplots/


You can refer to this file in your sphinx documentation; by default it
will just inline the plot with links to the source and PF and high
resolution PNGS.  To also include the source code for the plot in the
document, pass the ``include-source`` parameter::

  .. plot:: pyplots/ellipses.py
     :include-source:

In the HTML version of the document, the plot includes links to the
original source code, a high-resolution PNG and a PDF.  In the PDF
version of the document, the plot is included as a scalable PDF.

.. plot:: pyplots/ellipses.py
   :include-source:


You can also inline code for plots directly, and the code will be
executed at documentation build time and the figure inserted into your
docs; the following code::

   .. plot::

      import matplotlib.pyplot as plt
      import numpy as np
      x = np.random.randn(1000)
      plt.hist( x, 20)
      plt.grid()
      plt.title(r'Normal: $\mu=%.2f, \sigma=%.2f$'%(x.mean(), x.std()))
      plt.show()

produces this output:

.. plot::

    import matplotlib.pyplot as plt
    import numpy as np
    x = np.random.randn(1000)
    plt.hist( x, 20)
    plt.grid()
    plt.title(r'Normal: $\mu=%.2f, \sigma=%.2f$'%(x.mean(), x.std()))
    plt.show()


See the matplotlib `pyplot tutorial
<http://matplotlib.sourceforge.net/users/pyplot_tutorial.html>`_ and
the `gallery <http://matplotlib.sourceforge.net/gallery.html>`_ for
lots of examples of matplotlib plots.

继承图
============================

Inheritance diagrams can be inserted directly into the document by
providing a list of class or module names to the
``inheritance-diagram`` directive.

For example::

  .. inheritance-diagram:: codecs

produces:

.. inheritance-diagram:: codecs


.. _extensions-literal:

本文件的源代码
===============

.. literalinclude:: extensions.txt


